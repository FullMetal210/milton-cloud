<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
		<property name="ignoreResourceNotFound" value="true"/>
		<property name="locations" >
			<list>
                <!-- Default properties, should run out of the box -->
				<value>classpath:spliffy-default.properties</value>
				
                <!-- This refers to an optional file which should be outside the WAR (ie in tomcat/shared/classes -->
                <!-- It contains environment specific configuration, such as database connection information -->
				<value>classpath:spliffy-env.properties</value>				
			</list>
		</property>
	</bean>

    <import resource="classpath:database.xml"/>
    
    <!-- Another environment specific file. Default empty file is included, but create your own outside the WAR to 
    environment specific bean declarations
    -->
    <import resource="classpath:env.xml"/>

    <bean id="lock.manager" class="io.milton.http.fs.SimpleLockManager" />
            
    <bean id="blob.store" class="io.milton.cloud.common.store.FileSystemBlobStore">
        <constructor-arg value="${blob.storage.location}" />
    </bean>
    
    <!-- This is a much more robust blob store, but experimental -->
    <!--
    <bean id="blob.store" class="io.milton.cloud.server.db.store.HAVolumeBlobStore">
        <constructor-arg ref="volume.allocator"/>
        <constructor-arg>
            <list>
                <ref local="local.volume.type" />
            </list>
        </constructor-arg>
        <constructor-arg ref="session.manager" />
    </bean>
    -->

    <bean id="hash.store" class="io.milton.vfs.content.DbHashStore"/>
    
    <bean id="mail.sender" class="com.ettrema.mail.send.RemoteSmtpMailSender" init-method="start">
        <constructor-arg value="${mail.smtp.host}"/>
        <constructor-arg value="${mail.smtp.user}"/>
        <constructor-arg value="${mail.smtp.password}"/>
        <constructor-arg value="${mail.smtp.port}"/>
    </bean>

    <!--
    <bean id="mail.sender.mock" class="com.ettrema.mail.send.MockMailSender"></bean>
    -->
    <!--
    <bean id="mail.sender.aspirin" class="com.ettrema.mail.send.AspirinMailSender"></bean>
    -->
    
    
    <bean id="password.manager" class="io.milton.cloud.server.manager.PasswordManager"/>

    <bean id="dao.user" class="io.milton.cloud.server.db.utils.UserDao"  >

    </bean>

    <bean id="security.manager" class="io.milton.cloud.server.web.SpliffySecurityManager">
        <constructor-arg ref="dao.user" />
        <constructor-arg ref="password.manager" />
    </bean>
            
    <bean id="event.manager" class="io.milton.event.EventManagerImpl"/>
    
    <bean id="application.manager" class="io.milton.cloud.server.apps.ApplicationManager">
        <constructor-arg>
            <list>
                <bean class="io.milton.cloud.server.apps.orgs.OrganisationsApp"/>
                <bean class="io.milton.cloud.server.apps.website.WebsiteApp"/>
                <bean class="io.milton.cloud.server.apps.admin.users.UserAdminApp"/>
                <bean class="io.milton.cloud.server.apps.admin.websites.WebsiteAdminApp"/>
                <bean class="io.milton.cloud.server.apps.login.LoginApp"/>
                <bean class="io.milton.cloud.server.apps.calendar.CalendarApp"/>
                <bean class="io.milton.cloud.server.apps.contacts.ContactsApp"/>
                <bean class="io.milton.cloud.server.apps.signup.SignupApp"/>
            </list>
        </constructor-arg>
        <property name="appsConfigDir" value="${apps.config.dir}" />
    </bean>
    
        
    <bean id="services" class="io.milton.cloud.server.web.Services">
        <constructor-arg ref="hash.store"/>
        <constructor-arg ref="blob.store"/>
        <constructor-arg ref="security.manager"/>
        <constructor-arg ref="application.manager"/>
    </bean>       

    <bean id="main.spliffy.resource.factory" class="io.milton.cloud.server.web.SpliffyResourceFactory" init-method="start" destroy-method="stop">
        <!--        
        <constructor-arg ref="lock.manager"/>
        -->
        <constructor-arg ref="session.manager"/>
        <constructor-arg ref="dao.user"/>
        <constructor-arg ref="security.manager"/>
        <constructor-arg ref="services"/>
        <constructor-arg ref="application.manager"/>        
        <constructor-arg ref="event.manager"/> 
    </bean>
       
    <bean id="sync.spliffy.resource.factory" class="io.milton.cloud.server.web.sync.SpliffySyncResourceFactory">
        <constructor-arg ref="hash.store" />
        <constructor-arg ref="blob.store" />
        <constructor-arg ref="security.manager" />
    </bean>
    
    <!-- This will expose resources on the classpath, required for apps which have css/js files in the jar -->
    <bean id="classpath.resource.factory" class="io.milton.http.fs.ClassPathResourceFactory"></bean>
    
    <bean id="apps.resource.factory" class="io.milton.cloud.server.web.resources.AppsResourceFactory">
        <constructor-arg ref="application.manager" />
    </bean>        
    
    <bean id="resource.factory" class="io.milton.http.MultipleResourceFactory">
        <constructor-arg>
            <list>
                <ref local="sync.spliffy.resource.factory" />
                <ref local="main.spliffy.resource.factory" />  
                <ref local="apps.resource.factory"/>
                <ref local="classpath.resource.factory" />
            </list>
        </constructor-arg>
    </bean>

    <!-- This is used for accessing web resources from a file path. Most useful for debugging -->
    <bean class="io.milton.cloud.server.config.SysPropertyResourceFactoryLoader" init-method="init">
        <constructor-arg ref="resource.factory" />
    </bean>

    <bean id="open.session.in.view.filter" class="io.milton.cloud.server.db.utils.MiltonOpenSessionInViewFilter">
        <constructor-arg ref="session.manager"/>
    </bean>

    <bean id="milton.http.manager" class="io.milton.config.HttpManagerBuilder">
        <property name="mainResourceFactory" ref="resource.factory" /> 
        <property name="eventManager" ref="event.manager" />
        <property name="filters">
            <list>
                <ref local="open.session.in.view.filter" />
            </list>
        </property>        
    </bean>


    <!--
    <bean id="ftp.security.manager" class="com.ettrema.ftp.WrappingFtpSecurityManager">
        <constructor-arg ref="security.manager"/>
    </bean>
    -->

    <!-- Adapts the specified milton security manager to the FTP server -->
    <!--
    <bean id="ftp.user.manager" class="com.ettrema.ftp.UserManagerAdapter">
        <constructor-arg ref="resource.factory"/>
        <constructor-arg ref="ftp.security.manager"/>
    </bean>
    -->

    <!-- This server will provide access to the same resources available on webdav
    via FTP -->
    <!--
    <bean id="ftp.server" class="com.ettrema.ftp.MiltonFtpAdapter">
        <constructor-arg ref="resource.factory"/>
        <constructor-arg ref="ftp.user.manager"/>
    </bean>
    -->
      
</beans>